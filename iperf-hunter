#!/bin/bash

pr_debug=0
function debug_pr {
    if [ "$pr_debug" == 1 ]; then
        echo $@
    fi
}

max_percent=0

# generic-binary-hunter - binary search the result of a command .
# Arguments: <low> <high> <cmd>
# Return: when cmd's return value is 1
#
function generic-binary-hunter {
    debug_pr generic-binary-hunter @15 enter: $@
    local mid
    local low=$1
    local high=$2
    shift 2

    if [ $low -gt $(($high - 2)) ]; then
        echo Final answer: $low
        return   # final result
    fi
    mid=$(( ( $low + $high ) / 2 ))
    if ( eval $@ $mid  ) ; then
        # cmd  return status = 0
        debug_pr generic-binary-hunter @28 PASS
        low=$mid
    else
        # cmd return status != non-zero
        debug_pr generic-binary-hunter @32 FAIL
        high=$mid

    fi
    # recursive
    generic-binary-hunter $low $high "$@"
} 

# generic-hunter - 
#    generic-hunter --begin $hstart --end $hend <target-command> <arg>
# Argument: hstart, the hunting start value
# Argument: hend, the end value
# Argument: target-command, the function to run 
# Argument: arg, opaque argument of target-command
#
function generic-hunter {
    debug_pr generic-hunter @45 enter: $@

    longopts="begin:,end:,max-loss-pct:"
    opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
    if [ $? -ne 0 ]; then
        exit_error "Unrecognized option specified"
    fi
    eval set -- "$opts"; 
    while true; do
        case "$1" in
        --begin)
            shift;
            begin="$1"
            shift
            ;; 
        --end)
            shift;
            end="$1"
            shift
            ;; 
        --max-loss-pct)
            shift;
            max_percent="$1"
            shift
            ;; 
        --)
            shift;
            break
            ;;
        *)
            exit_error "Invalid option: $1"
        esac
    done

    generic-binary-hunter $begin $end "$@"
} 

# iperf-drop analyzer -  Examine results for drop 
# Arguments: none
# Return: analyzed_result
#
analyzed_result=
function iperf-drop-analyzer {

    # Ex: drop 100%
    #    [ ID] Interval           Transfer     Bitrate         Jitter    Lost/Total Datagrams
    # [  5]   0.00-30.00  sec  0.00 Bytes  0.00 Gbits/sec  0.000 ms  0/0 (0%)  receiver
    #
    # Drop some:
    #   - - - - - - - - - - - - - - - - - - - - - - - - -
    #   [ ID] Interval           Transfer     Bitrate         Jitter    Lost/Total Datagrams
    #   [  5]   0.00-30.00  sec  17.5 GBytes  5.00 Gbits/sec  0.012 ms  148/1144389 (0.013%)  receiver
    pwd 
    local __tuple
    local Lost
    local Total
    rfile="iperf-client-result.txt"
    pattern="receiver"

    #
    # Note, sender's Total do not match receiver's Total even when iperf says 
    # 0% drop. iperf3 itself also computes % drop using receiver stats ONLY. 
    #
    receiver_line=$(perl -e 'print reverse <>' $rfile | grep -m 1 "receiver")
    debug_pr receiver_line=$line

    #colum 11 is Lost/Total
    __tuple="$(echo $receiver_line | awk '{print $11}')"
    Lost=$(echo $__tuple | awk -F'/' '{print $1}')
    Total=$(echo $__tuple | awk -F'/' '{print $2}')

    if [ "$Total" -eq "0"  ]; then
        # UDP must have collapsed. No pkt arrived at the receive side.
        # This could happen when ipfrag was overwhelmed.
        echo "FAIL: $receiver_line"  >> iperf-client-result.txt
        analyzed_result=-1
    elif [ "$Lost" -eq "0" ] ; then
        echo "PASS: $receiver_line"  >> iperf-client-result.txt
        analyzed_result=0
    else
        # Compare drops against max-drop-pct limit.
        percent_drop="$(echo $receiver_line | awk '{print $12}')"
        debug_pr iperf_drop_percent=$percent_drop
        # percent_drop is what iperf says, but we'd like to calculate it.
        calc_percent=$(echo $Lost $Total | awk '{print $1*100/$2}')
        debug_pr calc_percent=$calc_percent  max_percent=$max_percent

        # Use awk for float compare.
        # The "!" is needed because the logic in awk boolean tests
        # is the opposite of the one in shell exit code tests
        if ! awk "BEGIN{ exit ($calc_percent <= $max_percent) }"; then
            # Drops were less than max-drop-pct. 
            echo "PASS: $receiver_line" >> iperf-client-result.txt
            analyzed_result=0
        else
            echo "FAIL: $receiver_line"  >> iperf-client-result.txt
            analyzed_result=$Lost
        fi
    fi
}   

# iperf-drop-hunter - run iperf at a specified bitrate and examine for packet drops.
# Arguments:  <rate-unit> <tx-rate-number>
# Global Argument: cmd 
#   The fully loaded cmd i.e 'iperf3 --format k -c <> -p <> --udp --get-server-output'
#   assembled by iperf-client 
# Return: 0 - no drop - hunter to raise target
#         1 - drops   - hunter to low target
#
function iperf-drop-hunter {
    debug_pr iperf-drop-hunter @116 enter: $@
    new_cmd="$cmd --bitrate $2$1" 
    echo iperf-drop-hunter @119 new_cmd: $new_cmd
    ${new_cmd} 2>&1 | tee -a iperf-client-result.txt
    iperf-drop-analyzer
    if [ "$analyzed_result" -ne "0" ]; then
        debug_pr @125 drop=$__result FAIL
        return 1
    else
        debug_pr @128 drop=$__result PASS
        return 0
    fi
}

# EOF

